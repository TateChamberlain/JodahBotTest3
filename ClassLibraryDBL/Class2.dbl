import System
import System.Collections
import System.Collections.Generic
import System.Text
import System.Threading.Tasks
import Microsoft.Bot.Builder.Dialogs;
import Microsoft.Bot.Connector;
import Synergex.SynergyDE.Select
import ClassLibraryDBL

namespace ClassLibraryDBL

    public class Class2

		public static method GetDBLString,	string
			endparams
			record
				returnvalue	,a100
				pres_rec	,pres_struct
				dat_post	,a100
				dat_len		,i4
				filech		,i4
		proc
			;mreturn "Hello from Synergy!"
;			pres_rec.firstname = "Jodah"
;			pres_rec.lastname = "Bot"
;			xcall getlog("DAT", dat_post, dat_len)
;			returnvalue = "The name is " + %atrim(pres_rec.firstname) + %atrim(pres_rec.lastname) + 
;			&				". The data is in " + %atrim(dat_post) + "."
			open(filech,"I:I","DAT:PRESENTERS.ISM")
			reads(filech,pres_rec)
			close filech
			returnvalue = "There is a presenter named " + %atrim(pres_rec.firstname) + " " + %atrim(pres_rec.lastname) + "."

			;throw new FileInUseException()
			mreturn %atrim(returnvalue)
		endmethod

		public static method GetAnotherDBLString, string
			endparams
			record
				returnvalue	,a100
				pres_rec	,pres_struct
				event_rec	,event_struct
				filech		,i4
				arraylist	,@ArrayList
		proc

			open(filech,"I:I","DAT:PRESENTERS.ISM")
			reads(filech,pres_rec)
			close filech

			arraylist = getEventByPresenterID(pres_rec.PRESENTERID)
			foreach event_rec in arraylist
			begin
				nop
			end

			returnvalue = %atrim(pres_rec.firstname) + " is leading an event called " + %atrim(event_rec.name)
			mreturn %atrim(returnvalue)
		endmethod


		public static method getEventByPresenterID, @System.Collections.ArrayList
			pres_id,	i4
			endparams
			record
				arraylist, @System.Collections.ArrayList
				event_arraylist, @System.Collections.ArrayList
			endrecord
		proc
			arraylist = new System.Collections.ArrayList()
			data event_rec, event_struct
			data junc_rec, junc_struct
			data fobj, @from, new from("DAT:Events.ism",event_rec)
			;;event_arraylist = getPresenterIDByEventID(pres_id)
			event_arraylist = getEventIDByPresenterID(pres_id)
			foreach junc_rec in event_arraylist
			begin
				data sobj, @Select, new select(fobj, (where)junc_rec.EVENTID .eq. event_rec.EVENTID)
				foreach event_rec in sobj
					arraylist.add(event_rec)
			end
			mreturn arraylist
		endmethod


		public static method getEventIDByPresenterID, @System.Collections.ArrayList
			pres_id,	i4
			endparams
			record
				arraylist, @System.Collections.ArrayList
			endrecord
		proc
			data junc_rec, junc_struct
			data fobj, @FROM, new from("DAT:Junction.ism",junc_rec)
			data sobj, @Select, new select(fobj, (where)pres_id .eq. junc_rec.PRESENTERID)
			arraylist = new system.collections.arraylist()
			foreach junc_rec in sobj
				arraylist.add(junc_rec)
			mreturn arraylist
		endmethod


		public static method getPresenterIDByEventID, @System.Collections.ArrayList
			event_id,	i4
			endparams
			record
				arraylist, @System.Collections.ArrayList
			endrecord
		proc
			arraylist = new system.collections.arraylist()
			data junc_rec, junc_struct
			data fobj, @FROM, new from("DAT:Junction.ism",junc_rec)
			data sobj, @Select, new select(fobj, (where)event_id .eq. junc_rec.EVENTID)
			foreach junc_rec in sobj
				arraylist.add(junc_rec)
			mreturn arraylist
		endmethod
    
    endclass

	
	{Serializable}
	public partial class DBLDialog implements IDialog

		public async method StartAsync, @Task
			context, @IDialogContext 
			endparams
		proc
			context.Wait(MessageReceivedAsync)
		endmethod

		public async method MessageReceivedAsync, @Task
			context, @IDialogContext 
			argument, @IAwaitable<IMessageActivity> 
			endparams
		proc
			data message, @IMessageActivity, await argument
			await context.PostAsync("You sent: '" + message.Text.ToString() + "'")
			data replystring = string.Empty
			try
			begin
				data rand, @Random, new Random()
				if (rand.Next(2) == 1) then
				begin
					replystring = Class2.GetDBLString()
				end
				else
				begin
					replystring = Class2.GetAnotherDBLString()
				end
			end
			catch (e, @Exception)
			begin
				replystring = "Uh-oh! There's a problem with Synergy! " + e.Message + " / " + e.StackTrace + " / " + e.InnerException.Message
			end
			endtry

			await context.PostAsync(replystring)

			;;  Make sure to receive the next message
			context.Wait(MessageReceivedAsync)
		endmethod
	endclass



endnamespace
